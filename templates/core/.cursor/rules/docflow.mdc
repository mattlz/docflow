---
description: Docflow - Project-Agnostic Documentation System
globs:
alwaysApply: true
---

# Docflow

## Project Documentation System
Docflow is a lightweight, project-agnostic, release-based documentation and execution system. It favors simple markdown, clear status gates, and chat-executable commands.

- **docflow/project/** - Static project context (specs, architecture, design, stack)
  - App-level assets (like prompts) live under `docflow/assets/*` until implemented in code
- **docflow/releases/current/** - Active release work (index.md is your PRIMARY REFERENCE)
- **docflow/backlog/** - Future planning and ideas  
- **docflow/active/** - Session management and current focus
- **docflow/decisions/** - Architecture Decision Records (ADRs)
- **docflow/templates/** - Standardized templates for items and ADRs

## Getting Started Protocol

**ALWAYS START HERE:** Read `docflow/releases/current/index.md` for current state and priorities.

1. Check current focus and active items
2. Review session handoff in `docflow/active/session.md`
3. Reference project context from `docflow/project/` as needed
4. Use slash commands to run processes; update progress in real-time

## File Navigation Priorities

1. **docflow/releases/current/index.md** - Primary reference, current state
2. **docflow/active/focus.md** - What's being worked on right now
3. **docflow/active/session.md** - Session handoff and notes
4. **docflow/releases/current/features.md** - Detailed item specs (MVP keeps one list)
5. **docflow/backlog/features.md** - Future ideas and deferred work
6. **docflow/decisions/** - ADRs index and records
7. **docflow/project/** - Static project context (specs, design, architecture, stack)
8. **docflow/assets/** - App assets to implement later (e.g., system prompts)

## Item Management Workflow

### Adding New Items Checklist
- [ ] Add to appropriate backlog file first (features)
- [ ] Assign complexity (XS/S/M/L/XL) and priority (High/Medium/Low)
- [ ] Document dependencies/blockers if any
- [ ] Only move to current release when fully defined and ready
- [ ] Update releases/current/index.md router when moving to active

### Starting Work Checklist  
- [ ] Item exists in current release with status "Ready"
- [ ] Move item status to "In Progress" in index.md
- [ ] Update active/focus.md with current item details
- [ ] Check dependencies are complete
- [ ] Begin implementation

### Real-time Progress Updates
- [ ] Update item status in releases/current/index.md as progress is made
- [ ] Move items through workflow: Idea ‚Üí Planning ‚Üí Ready ‚Üí In Progress ‚Üí In Review ‚Üí Complete
- [ ] Update active/focus.md throughout session with current tasks
- [ ] Document any new items discovered during implementation

### Scope/Requirement Changes Protocol
When requirements change during implementation:
- [ ] Pause development and assess impact
- [ ] Update item definition in `releases/current/features.md` (and backlog if needed)
- [ ] Reassess complexity/priority if needed
- [ ] Update dependencies if affected
- [ ] Document change rationale in architecture.md if architectural
- [ ] Update index.md if priority shifts

## Status Workflow & Definitions

- **Idea**: Rough concept, needs planning
- **Planning**: Being defined and scoped  
- **Ready**: Fully defined, ready for implementation
- **In Progress**: Currently being worked on
- **In Review**: Implemented, needs iteration/review  
- **Complete**: Finished and verified
- **Blocked**: Cannot proceed due to dependency

## Bug Priority Handling
- **Critical**: Drop everything, resolve immediately
- **High**: Resolve at next logical stopping point
- **Low**: Add to planned work

When bugs are found in "completed" features:
1. Move the affected item back to "In Progress"
2. Add a bug entry to `releases/current/features.md` (tag as Bug) or annotate the affected item
3. Resolve the bug before continuing new work

## Session Management

### During Development
- Keep docflow/active/focus.md updated with current work
- Update progress in releases/current/index.md in real-time
- Document decisions in docflow/active/session.md
- Add new items to backlog or current release as discovered

### Wrap Session (via `/df-wrap`)
When asked to wrap up (e.g., "wrap up", "end session"), run the slash command `/df-wrap`.

The command performs:
- Update active item status in `releases/current/index.md`
- Capture outstanding decisions/changes (use `/df-note` as needed)
- Update `docflow/active/focus.md` with next steps and blockers
- Update `docflow/active/session.md` with handoff notes
- Clean up and organize: progress indicators and any session summary

Reference: `.cursor/commands/WrapSession.md` for full steps and expected output.

Command response format:
"üîÑ Wrapping up session...
‚úÖ [Major accomplishments]
üìù Updated progress: [specific updates]
üêõ [Any bugs found or issues]
‚è≠Ô∏è Next session focus: [clear priority]
üìã [Any blockers or notes needed]
‚ú® Session complete!"

## Implementation Standards

### Pattern-First Development
- **ALWAYS analyze existing patterns before creating new ones**
- **NEVER invent new layouts when similar pages exist**
- **COPY and adapt proven structures rather than innovating**
- **MATCH component usage, styling, and patterns from reference examples**

### Quality Gates
- New implementations must match existing similar implementations
- Component usage must be consistent with established patterns
- Follow docflow/project/design.md and docflow/project/stack.md guidelines
- Update docflow/project/architecture.md when making technical decisions

### External Documentation
- **Reference Context7** for current library documentation and examples
- **Check official docs** for Next.js, React, TypeScript, and chosen stack
- **Follow project docs first**, then latest external best practices
- **Maintain consistency** with established patterns in docflow/project/stack.md


## Item Schema (Frontmatter + Sections)

Frontmatter fields for each item (feature/bug/enhancement):
- id: string (e.g., F001)
- title: string
- status: Idea | Planning | Ready | In Progress | In Review | Complete
- priority: High | Medium | Low
- complexity: XS | S | M | L | XL
- owner: string
- dependencies: string[]
- due?: date
- links?: string[]
- acceptance_criteria: string[]

Sections:
- Context
- Definition of Ready (DoR)
- Definition of Done (DoD)
- Notes

DoR Checklist:
- [ ] Scope and user impact are clear
- [ ] Acceptance criteria listed
- [ ] Dependencies resolved or planned
- [ ] Designs/architecture references linked (if applicable)
- [ ] Risks identified and mitigations noted

DoD Checklist:
- [ ] Acceptance criteria met
- [ ] Tests updated/added (if applicable)
- [ ] Docs updated (specs/design/stack/ADR if needed)
- [ ] Release notes updated (if applicable)
- [ ] Session handoff updated

## Slash Commands and Process Mapping

Docflow uses slash commands to make the workflow executable in chat. Commands live under `.cursor/commands` and are project-agnostic.

Recommended command names are prefixed to avoid collisions:
- `/df-bootstrap` ‚Üí Initialize or sync Docflow in this repo (blank or existing)
- `/df-start` ‚Üí Start a session (reads index; prepares focus)
- `/df-focus <ID>` ‚Üí Set active item and update focus/index
- `/df-note "text"` ‚Üí CaptureNote in `docflow/notes/YYYY-MM-DD.md`
- `/df-adr "title"` ‚Üí Create an ADR in `docflow/decisions/`
- `/df-feature "title"` ‚Üí Add a backlog feature using template
- `/df-wrap` ‚Üí Run WrapSession; update statuses and handoff
- `/df-status` ‚Üí Summarize counts by status from current release

Each command document defines: purpose, usage, file updates, and response format.

Notes:
- For prompt/policy/config changes: use `/df-note` for lightweight logging, or `/df-adr` if the change is structural.

*Docflow ensures consistent practices, clear progress tracking, and seamless handoffs. `docflow/releases/current/index.md` is the primary reference‚Äîalways start there.*
